Программная реализация и исследование хеш-таблиц

Цель:
Разработать и исследовать различные методы реализации хеш-таблиц с разными способами разрешения коллизий и хеш-функциями. Оценить производительность на основе тестов и визуализировать результаты с помощью графиков.

Язык/языки:
C++ — реализация хеш-таблиц и тестирование.
Python — построение графиков по результатам тестов.
Виды хеш-таблиц и способы реализации:
Метод цепочек (chaining):

Использование односвязных списков для хранения элементов в случае коллизий.
Использование сбалансированных деревьев (например, AVL-деревья или красно-черные деревья) для уменьшения времени поиска при большом количестве коллизий.
Открытая адресация (open addressing):

Линейное пробирование (linear probing):
Стратегия разрешения коллизий, при которой поиск свободной ячейки осуществляется путем последовательного обхода таблицы.
Формула: h(k, i) = (h'(k) + i) % m.

Квадратичное пробирование (quadratic probing):
Похожее на линейное пробирование, но шаги увеличиваются квадратично, что снижает вероятность кластеризации.
Формула: h(k, i) = (h'(k) + c1 * i + c2 * i^2) % m.

Двойное хеширование (double hashing):
Используется вторая хеш-функция для разрешения коллизий, что уменьшает вероятность одинаковых коллизий при больших таблицах.
Формула: h(k, i) = (h1(k) + i * h2(k)) % m.

Кукушкино хеширование (Cuckoo Hashing):

Для каждого ключа существует две возможные позиции в таблице (две хеш-функции).
Если при вставке происходит коллизия, новый элемент выталкивает старый элемент в его вторичную позицию.
Преимущество: гарантированное O(1) время поиска.
Для реализации необходимо две таблицы и две хеш-функции для вычисления местоположения ключа.
Виды хеш-функций:
Деление по модулю:
Простая и эффективная хеш-функция, которая используется для целых чисел.
Формула: h(k) = k % m, где m — размер таблицы.

Умножение:
Эффективная хеш-функция для целых чисел.
Формула: h(k) = floor(m * (k * A % 1)), где A — константа (обычно 0.618).

Функции на основе битовых операций:

Bitwise XOR: Использование побитового исключающего ИЛИ для комбинирования битов.
Сдвиги битов и сложение: Применение операций сдвига для ускорения вычислений.
Хеш-функции для строк:

Полиномиальный хеш:
Формула: h(s) = (s[0] * p^0 + s[1] * p^1 + ... + s[n-1] * p^(n-1)) % m, где p — константа (например, 31).
Хеширование по символам с использованием битовых операций — комбинирует символы строки с помощью побитовых операций.
Стандартные хеш-функции:
Использование готовых хеш-функций из библиотеки STL в C++ (std::hash).

Виды тестов:
Тесты на корректность работы:

Вставка: Проверка добавления элементов в хеш-таблицу.
Поиск: Проверка корректного поиска существующих и отсутствующих элементов.
Удаление: Проверка корректного удаления элементов.
Обработка коллизий: Добавление ключей, которые вызывают коллизии, и проверка их корректного разрешения.
Производительность (временные тесты):

Время вставки: Замер времени вставки большого количества элементов (например, 1 миллион).
Время поиска: Замер времени поиска существующих и отсутствующих элементов.
Время удаления: Замер времени удаления элементов из таблицы.
Нагрузочные тесты:
Тестирование хеш-таблиц на больших объемах данных (например, 1 млн+ элементов), проверка устойчивости при высоком коэффициенте заполнения таблицы.

Сравнительные тесты:
Сравнение времени работы для разных методов разрешения коллизий (цепочки на списках/деревьях, линейное пробирование и т.д.).
Сравнение производительности при использовании разных хеш-функций.

Построение графиков:
Время вставки, поиска, удаления в зависимости от количества элементов (например, от 10 тыс. до 1 млн).
Влияние коэффициента заполнения (load factor) на производительность таблицы.
Сравнение методов разрешения коллизий (цепочки vs открытая адресация vs кукушкино хеширование).
Зависимость от хеш-функций (разные хеш-функции для чисел и строк).
Инструменты для построения графиков:

Результаты тестов сохраняются в файл (например, CSV).
Python + matplotlib для построения графиков.
Рекомендации:

В тестах рекомендуется использовать как цифры, так и строки/символы для оценки производительности и корректности работы хеш-таблицы с разными типами ключей.
Цифры подойдут для тестирования производительности на больших объемах данных.
Слова/символы помогут проверить работу хеш-функций и корректность разрешения коллизий.
